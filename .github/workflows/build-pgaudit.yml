name: Build pgaudit Extension

on:
  push:
    paths:
      - 'pgaudit/**'
  workflow_call:
    inputs:
      pgaudit-version:
        required: true
        type: string
      pg-version:
        required: false
        type: string
        default: "18"
      distro:
        required: false
        type: string
        default: "bookworm"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Clone pgaudit source
        if: github.event_name == 'workflow_call'
        run: |
          git clone https://github.com/pgaudit/pgaudit.git pgaudit/source
          cd pgaudit/source
          git checkout ${{ inputs.pgaudit-version }}
          
      - name: Get latest pgaudit version for push
        if: github.event_name == 'push'
        id: version
        run: |
          LATEST=$(curl -s https://api.github.com/repos/pgaudit/pgaudit/releases/latest | jq -r '.tag_name')
          echo "version=${LATEST}" >> $GITHUB_OUTPUT
          git clone https://github.com/pgaudit/pgaudit.git pgaudit/source
          cd pgaudit/source
          git checkout ${LATEST}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push
        run: |
          cd pgaudit
          PGAUDIT_VER="${{ inputs.pgaudit-version || steps.version.outputs.version }}"
          
          # Choose target and set variables based on branch
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            TARGET="pgaudit"
            REGISTRY="ghcr.io/${{ github.repository_owner }}" \
            PG_VERSION="${{ inputs.pg-version || '18' }}" \
            DISTRO="${{ inputs.distro || 'bookworm' }}" \
            PGAUDIT_VERSION="${PGAUDIT_VER}" \
            docker buildx bake \
              --set pgaudit.context=source \
              --set "*.args.PG_VERSION=${{ inputs.pg-version || '18' }}" \
              --set "*.args.DISTRO=${{ inputs.distro || 'bookworm' }}" \
              --set "*.args.PGAUDIT_VERSION=${PGAUDIT_VER}" \
              ${TARGET} \
              --push
          else
            TARGET="pgaudit-feature"
            REGISTRY="ghcr.io/${{ github.repository_owner }}" \
            PG_VERSION="${{ inputs.pg-version || '18' }}" \
            DISTRO="${{ inputs.distro || 'bookworm' }}" \
            PGAUDIT_VERSION="${PGAUDIT_VER}" \
            BRANCH_NAME="${{ github.ref_name }}" \
            docker buildx bake \
              --set pgaudit-feature.context=source \
              --set "*.args.PG_VERSION=${{ inputs.pg-version || '18' }}" \
              --set "*.args.DISTRO=${{ inputs.distro || 'bookworm' }}" \
              --set "*.args.PGAUDIT_VERSION=${PGAUDIT_VER}" \
              ${TARGET} \
              --push
          fi
            
  smoke-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from build
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_call" ]; then
            echo "version=${{ inputs.pgaudit-version }}" >> $GITHUB_OUTPUT
          else
            LATEST=$(curl -s https://api.github.com/repos/pgaudit/pgaudit/releases/latest | jq -r '.tag_name')
            echo "version=${LATEST}" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Kind Cluster
        uses: helm/kind-action@v1
        with:
          version: v0.24.0
          kubectl_version: v1.31.0
          node_image: kindest/node:v1.31.0
          config: kind-config.yaml


      - name: Check Kind Cluster Status
        run: |
          echo "Kind cluster 'kind' is ready."
          kubectl cluster-info
          kubectl get nodes

      - name: Run smoke tests
        run: |
          PG_VER="${{ inputs.pg-version || '18' }}"
          DISTRO="${{ inputs.distro || 'bookworm' }}"
          PGAUDIT_VER="${{ steps.get-version.outputs.version }}"
          
          # Set image tag based on branch
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/pgaudit:${PG_VER}-${PGAUDIT_VER}-${DISTRO}"
          else
            IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/pgaudit:${PG_VER}-${PGAUDIT_VER}-${{ github.ref_name }}-${DISTRO}"
          fi
          
          echo "Testing with image: ${IMAGE_TAG}"
          
          # Create test pod with pgaudit extension
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Pod
          metadata:
            name: pgaudit-test
          spec:
            containers:
            - name: postgres
              image: ghcr.io/cloudnative-pg/postgresql:${PG_VER}-${DISTRO}
              env:
              - name: POSTGRES_PASSWORD
                value: test
              - name: POSTGRES_DB
                value: test
              command: ["/bin/bash", "-c"]
              args:
                - |
                  export LD_LIBRARY_PATH=/opt/extension/lib:$LD_LIBRARY_PATH
                  export PGDATA=/tmp/pgdata
                  mkdir -p $PGDATA
                  chown postgres:postgres $PGDATA
                  su postgres -c "initdb -D $PGDATA"
                  echo "shared_preload_libraries = 'pgaudit'" >> $PGDATA/postgresql.conf
                  su postgres -c "pg_ctl -D $PGDATA -l /tmp/logfile start"
                  sleep 5
                  su postgres -c "createdb test"
                  su postgres -c "psql -d test -c 'CREATE EXTENSION pgaudit;'"
                  echo "pgaudit extension created successfully"
                  tail -f /tmp/logfile
              volumeMounts:
              - name: pgaudit-ext
                mountPath: /opt/extension
            volumes:
            - name: pgaudit-ext
              image:
                reference: ${IMAGE_TAG}
          EOF
          
          kubectl describe pod pgaudit-test
          kubectl get pod pgaudit-test -o yaml
          kubectl wait --for=condition=Ready pod/pgaudit-test --timeout=120s
          kubectl logs pgaudit-test --tail=20
          
      - name: Tag successful build
        if: success() && github.ref == 'refs/heads/main'
        run: |
          git tag "pgaudit-${{ steps.get-version.outputs.version }}"
          git push origin "pgaudit-${{ steps.get-version.outputs.version }}"